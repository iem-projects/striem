#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2014, IOhannes m zmölnig, IEM

# This file is part of striem
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with striem.  If not, see <http://www.gnu.org/licenses/>.


from PySide.QtGui import QDialog, QApplication, QVBoxLayout, QIcon
from PySide.QtCore import Qt
import gui, core


## cmdline arguments
def parseCmdlineArgs():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', type=str,
                        help="Configuration file to read")
    parser.add_argument('--set', type=str,
                        nargs=2, metavar=('section:option', 'value'),
                        action='append',
                        help="set a specific configuration item (e.g. 'GUI:allowquit 0')")
    parser.add_argument('--property', type=str,
                        nargs=2, metavar=('element.property', 'value'),
                        action='append',
                        help="set the property of a specific pipeline element (e.g. 'audio.gain 0.1')")


    args = parser.parse_args()
    return args

def keyvalues2dict(keyvalues, d=None):
    if not d:
        d={}
    if not keyvalues:
        return d
    for (key, value) in keyvalues:
        d[key]=value
    return d

if __name__ == '__main__':
    args=parseCmdlineArgs()

    import sys

    #if args.logfile is None:
    #        args.logfile='stderr'
    #l = logger.logger(args.logfile)

    #import gobject
    #gobject.threads_init()

    # Create the Qt Application
    app = QApplication(sys.argv)
    #translator = Translator(app)

    if not args.config:
        args.config=None

    # create the streamer
    streamer = core.streamer(configfile=args.config,
                             configvalues=keyvalues2dict(args.set),
                             pipedefaults=keyvalues2dict(args.property)
                             )

    # Create and show the form
    form = gui.striem(app=app, streamer=streamer)

    streamer.setGui(form)
    streamer.run(True)

    form.show()
    # Run the main Qt loop
    sys.exit(app.exec_())
