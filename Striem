#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2014, IOhannes m zmölnig, IEM

# This file is part of striem
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with striem.  If not, see <http://www.gnu.org/licenses/>.

from PySide.QtGui import QApplication
from PySide.QtCore import Qt, Signal, QTextStream
import logging

log = logging.getLogger("striem")

# uuid.uuid3(uuid.NAMESPACE_DNS, 'striem.iem.at')
uid = 'cac31e48-fa6d-3cc1-bbbe-795f72b1c131'

try: unicode
except NameError: unicode = str

# singleton application https://stackoverflow.com/q/12712360/1169096
class QSingleApplication(QApplication):

    messageReceived = Signal(unicode)

    def __init__(self, id, *argv):
        from PySide.QtNetwork import QLocalSocket, QLocalServer
        super(QSingleApplication, self).__init__(*argv)
        self._id = id
        self._activationWindow = None
        self._activateOnMessage = False

        # Is there another instance running?
        self._outSocket = QLocalSocket()
        self._outSocket.connectToServer(self._id)
        self._isRunning = self._outSocket.waitForConnected()

        if self._isRunning:
            # Yes, there is.
            self._outStream = QTextStream(self._outSocket)
            self._outStream.setCodec('UTF-8')
        else:
            # No, there isn't.
            self._outSocket = None
            self._outStream = None
            self._inSocket = None
            self._inStream = None
            self._server = QLocalServer()
            self._server.listen(self._id)
            self._server.newConnection.connect(self._onNewConnection)

    def isRunning(self):
        return self._isRunning

    def id(self):
        return self._id

    def activationWindow(self):
        return self._activationWindow

    def setActivationWindow(self, activationWindow, activateOnMessage = True):
        self._activationWindow = activationWindow
        self._activateOnMessage = activateOnMessage

    def activateWindow(self):
        if not self._activationWindow:
            return
        self._activationWindow.setWindowState(
            self._activationWindow.windowState() & ~Qt.WindowMinimized)
        self._activationWindow.raise_()
        self._activationWindow.activateWindow()

    def sendMessage(self, msg):
        if not self._outStream:
            return False
        self._outStream << msg << '\n'
        self._outStream.flush()
        return self._outSocket.waitForBytesWritten()

    def _onNewConnection(self):
        if self._inSocket:
            self._inSocket.readyRead.disconnect(self._onReadyRead)
        self._inSocket = self._server.nextPendingConnection()
        if not self._inSocket:
            return
        self._inStream = QTextStream(self._inSocket)
        self._inStream.setCodec('UTF-8')
        self._inSocket.readyRead.connect(self._onReadyRead)
        if self._activateOnMessage:
            self.activateWindow()

    def _onReadyRead(self):
        while True:
            msg = self._inStream.readLine()
            if not msg: break
            self.messageReceived.emit(msg)

# cmdline arguments
def parseCmdlineArgs():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help="raise verbosity")
    parser.add_argument('-q', '--quiet', action='count', default=0,
                        help="lower verbosity")
    parser.add_argument('--logfile',type=str,
                        help="logfile for messages (default: STDERR)")
    parser.add_argument('--no-single-app', action='store_true',
                        help="Allow this application to run multiple times simulatenously")
    parser.add_argument('-c', '--config', type=str,
                        help="Configuration file to read")
    parser.add_argument('--set', type=str,
                        nargs=2, metavar=('section:option', 'value'),
                        action='append',
                        help="set a specific configuration item (e.g. 'GUI:allowquit 0')")
    parser.add_argument('--property', type=str,
                        nargs=2, metavar=('element.property', 'value'),
                        action='append',
                        help="set the property of a specific pipeline element (e.g. 'audio.gain 0.1')")

    args = parser.parse_args()
    args.verbosity = int(args.verbose) - int(args.quiet)
    return args


def keyvalues2dict(keyvalues, d=None):
    if not d:
        d = dict()
    if not keyvalues:
        return d
    for (key, value) in keyvalues:
        d[key] = value
    return d


def create_streamer(app, args):
    import striem
    # create the streamer
    streamer = striem.core.streamer(configfile=args.config,
                                    configvalues=keyvalues2dict(args.set),
                                    pipedefaults=keyvalues2dict(args.property),
                                    )

    # Create and show the form
    form = striem.gui.striem(app=app, streamer=streamer)
    app.setActivationWindow(form)
    streamer.setGui(form)
    streamer.run(True)

    form.show()


if __name__ == '__main__':
    import sys
    args = parseCmdlineArgs()
    loglevel = logging.WARN - 10 * args.verbosity
    logconfig = dict()
    logconfig['level'] = logging.INFO
    logconfig['format'] = '%(asctime)s %(levelname)s:%(name)s: %(message)s'
    logconfig['datefmt'] = '%Y-%m-%dT%H:%M:%S'
    if args.logfile:
        logconfig['filename'] = args.logfile
    logging.basicConfig(**logconfig)
    log.info("IEM streamfeader started.")
    log.setLevel(loglevel)
    log.debug("%s" % (args,))

    # Create the Qt Application
    app = QSingleApplication(uid, sys.argv)
    if not args.no_single_app and app.isRunning():
        log.warn("IEM streamfeader already running")
        sys.exit(0)

    if not args.config:
        args.config = None

    create_streamer(app, args)

    # Run the main Qt loop
    ret = app.exec_()
    log.setLevel(logging.INFO)
    log.info("IEM streamfeader stopped.")
    sys.exit(ret)
